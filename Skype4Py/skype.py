from API import ICommand, _ISkypeAPI
from errors import *
from enums import *
from utils import *
from conversion import *
from client import *
from user import *
from call import *
from profile import *
from settings import *
from chat import *
from application import *
from voicemail import *
from sms import *
from filetransfer import *
import threading
import sys


class ISkype(EventHandlingBase):
    '''The main class which you have to instatinate to get access to Skype client.

    Usage
    =====

    You should access this class using the alias at the package level::
        import Skype4Py

        skype = Skype4Py.Skype()

    For possible constructor arguments, read the L{ISkype.__init__} description.

    Events
    ======

    Besides providing functionality to send commands to the client, Skype object will allow
    you to assign event handlers to events generated by Skype.

    This is done in three different ways which can be used simultaneously.

        1. Events object.

           You define your class resembling the L{ISkypeEvents} interface. You don't have to provide
           all event handlers, just the one you need. Then you pass an instance of this class as the
           I{Events} argument to the Skype object constructor (see L{ISkype.__init__}). You don't
           need to derive your class from L{ISkypeEvents}. It's just the methods names that matter.

        2. OnX properties.

           Write your event handlers as functions and assign them to OnX properties (where "X" is the
           name of the event) of Skype object. For the prototypes of the handlers, look at the
           L{ISkypeEvents} class. Note that your callables won't have the I{self} argument if they
           are not methods. If you're going to attach to a lot of events, consider using the Events
           object (1) instead.

        3. RegisterEventHandler / UnregisterEventHandler.

           Skype object features two methods that let you assign any number of callables to
           any event. Those are L{RegisterEventHandler} and L{UnregisterEventHandler}.
           For the names of events and prototypes of the handlers look at the L{ISkypeEvents} class.

    @newfield option: Option, Options

    @ivar OnNotify: Event handler; prototype same as L{ISkypeEvents.Notify}.

    Type: callable
    @type OnNotify: callable

    @ivar OnCommand: Event handler; prototype same as L{ISkypeEvents.Command}.

    Type: callable
    @type OnCommand: callable

    @ivar OnReply: Event handler; prototype same as L{ISkypeEvents.Reply}.

    Type: callable
    @type OnReply: callable

    @ivar OnError: Event handler; prototype same as L{ISkypeEvents.Error}.

    Type: callable
    @type OnError: callable

    @ivar OnAttachmentStatus: Event handler; prototype same as L{ISkypeEvents.AttachmentStatus}.

    Type: callable
    @type OnAttachmentStatus: callable

    @ivar OnConnectionStatus: Event handler; prototype same as L{ISkypeEvents.ConnectionStatus}.

    Type: callable
    @type OnConnectionStatus: callable

    @ivar OnUserStatus: Event handler; prototype same as L{ISkypeEvents.UserStatus}.

    Type: callable
    @type OnUserStatus: callable

    @ivar OnOnlineStatus: Event handler; prototype same as L{ISkypeEvents.OnlineStatus}.

    Type: callable
    @type OnOnlineStatus: callable

    @ivar OnCallStatus: Event handler; prototype same as L{ISkypeEvents.CallStatus}.

    Type: callable
    @type OnCallStatus: callable

    @ivar OnCallHistory: Event handler; prototype same as L{ISkypeEvents.CallHistory}.

    Type: callable
    @type OnCallHistory: callable

    @ivar OnMute: Event handler; prototype same as L{ISkypeEvents.Mute}.

    Type: callable
    @type OnMute: callable

    @ivar OnMessageStatus: Event handler; prototype same as L{ISkypeEvents.MessageStatus}.

    Type: callable
    @type OnMessageStatus: callable

    @ivar OnMessageHistory: Event handler; prototype same as L{ISkypeEvents.MessageHistory}.

    Type: callable
    @type OnMessageHistory: callable

    @ivar OnAutoAway: Event handler; prototype same as L{ISkypeEvents.AutoAway}.

    Type: callable
    @type OnAutoAway: callable

    @ivar OnCallDtmfReceived: Event handler; prototype same as L{ISkypeEvents.CallDtmfReceived}.

    Type: callable
    @type OnCallDtmfReceived: callable

    @ivar OnVoicemailStatus: Event handler; prototype same as L{ISkypeEvents.VoicemailStatus}.

    Type: callable
    @type OnVoicemailStatus: callable

    @ivar OnApplicationConnecting: Event handler; prototype same as L{ISkypeEvents.ApplicationConnecting}.

    Type: callable
    @type OnApplicationConnecting: callable

    @ivar OnApplicationStreams: Event handler; prototype same as L{ISkypeEvents.ApplicationStreams}.

    Type: callable
    @type OnApplicationStreams: callable

    @ivar OnApplicationDatagram: Event handler; prototype same as L{ISkypeEvents.ApplicationDatagram}.

    Type: callable
    @type OnApplicationDatagram: callable

    @ivar OnApplicationSending: Event handler; prototype same as L{ISkypeEvents.ApplicationSending}.

    Type: callable
    @type OnApplicationSending: callable

    @ivar OnApplicationReceiving: Event handler; prototype same as L{ISkypeEvents.ApplicationReceiving}.

    Type: callable
    @type OnApplicationReceiving: callable

    @ivar OnContactsFocused: Event handler; prototype same as L{ISkypeEvents.ContactsFocused}.

    Type: callable
    @type OnContactsFocused: callable

    @ivar OnGroupVisible: Event handler; prototype same as L{ISkypeEvents.GroupVisible}.

    Type: callable
    @type OnGroupVisible: callable

    @ivar OnGroupExpanded: Event handler; prototype same as L{ISkypeEvents.GroupExpanded}.

    Type: callable
    @type OnGroupExpanded: callable

    @ivar OnGroupUsers: Event handler; prototype same as L{ISkypeEvents.GroupUsers}.

    Type: callable
    @type OnGroupUsers: callable

    @ivar OnGroupDeleted: Event handler; prototype same as L{ISkypeEvents.GroupDeleted}.

    Type: callable
    @type OnGroupDeleted: callable

    @ivar OnUserMood: Event handler; prototype same as L{ISkypeEvents.UserMood}.

    Type: callable
    @type OnUserMood: callable

    @ivar OnSmsMessageStatusChanged: Event handler; prototype same as L{ISkypeEvents.SmsMessageStatusChanged}.

    Type: callable
    @type OnSmsMessageStatusChanged: callable

    @ivar OnSmsTargetStatusChanged: Event handler; prototype same as L{ISkypeEvents.SmsTargetStatusChanged}.

    Type: callable
    @type OnSmsTargetStatusChanged: callable

    @ivar OnCallInputStatusChanged: Event handler; prototype same as L{ISkypeEvents.CallInputStatusChanged}.

    Type: callable
    @type OnCallInputStatusChanged: callable

    @ivar OnAsyncSearchUsersFinished: Event handler; prototype same as L{ISkypeEvents.AsyncSearchUsersFinished}.

    Type: callable
    @type OnAsyncSearchUsersFinished: callable

    @ivar OnCallSeenStatusChanged: Event handler; prototype same as L{ISkypeEvents.CallSeenStatusChanged}.

    Type: callable
    @type OnCallSeenStatusChanged: callable

    @ivar OnPluginEventClicked: Event handler; prototype same as L{ISkypeEvents.PluginEventClicked}.

    Type: callable
    @type OnPluginEventClicked: callable

    @ivar OnPluginMenuItemClicked: Event handler; prototype same as L{ISkypeEvents.PluginMenuItemClicked}.

    Type: callable
    @type OnPluginMenuItemClicked: callable

    @ivar OnWallpaperChanged: Event handler; prototype same as L{ISkypeEvents.WallpaperChanged}.

    Type: callable
    @type OnWallpaperChanged: callable

    @ivar OnFileTransferStatusChanged: Event handler; prototype same as L{ISkypeEvents.FileTransferStatusChanged}.

    Type: callable
    @type OnFileTransferStatusChanged: callable

    @ivar OnCallTransferStatusChanged: Event handler; prototype same as L{ISkypeEvents.CallTransferStatusChanged}.

    Type: callable
    @type OnCallTransferStatusChanged: callable

    @ivar OnChatMembersChanged: Event handler; prototype same as L{ISkypeEvents.ChatMembersChanged}.

    Type: callable
    @type OnChatMembersChanged: callable

    @ivar OnChatMemberRoleChanged: Event handler; prototype same as L{ISkypeEvents.ChatMemberRoleChanged}.

    Type: callable
    @type OnChatMemberRoleChanged: callable

    @ivar OnCallVideoReceiveStatusChanged: Event handler; prototype same as L{ISkypeEvents.CallVideoReceiveStatusChanged}.

    Type: callable
    @type OnCallVideoReceiveStatusChanged: callable

    @ivar OnCallVideoSendStatusChanged: Event handler; prototype same as L{ISkypeEvents.CallVideoSendStatusChanged}.

    Type: callable
    @type OnCallVideoSendStatusChanged: callable

    @ivar OnCallVideoStatusChanged: Event handler; prototype same as L{ISkypeEvents.CallVideoStatusChanged}.

    Type: callable
    @type OnCallVideoStatusChanged: callable
    '''

    def __init__(self, Events=None, **Options):
        '''Initializes the object.

        @param Events: An optional object with event handlers. Read the B{Events} section at the top of this page.
        @type Events: object
        @param Options: Addtional options for the low-level API handler. For supported options, go to L{Skype4Py.API}
        subpackage and select your platform.
        @type Options: kwargs
        '''
        EventHandlingBase.__init__(self)
        if Events:
            self._SetEventHandlerObj(Events)

        self._API = _ISkypeAPI(self._Handler, **Options)

        self._Cache = True
        self.ResetCache()

        self._Timeout = 30000

        self._Convert = IConversion(self)
        self._Client = IClient(self)
        self._Settings = ISettings(self)
        self._Profile = IProfile(self)

    def __del__(self):
        '''Frees all resources.
        '''
        self._API.Close()

    def _Handler(self, mode, arg):
        # low-level API callback
        if mode == 'rece_api':
            self._CallEventHandler('Notify', arg)
            a, b = chop(arg)
            ObjectType = None
            # if..elif handling cache and most event handlers
            if a in ('CALL', 'USER', 'GROUP', 'CHAT', 'CHATMESSAGE', 'CHATMEMBER', 'VOICEMAIL', 'APPLICATION', 'SMS', 'FILETRANSFER'):
                ObjectType, ObjectId, PropName, Value = [a] + chop(b, 2)
                self._CacheDict[str(ObjectType), str(ObjectId), str(PropName)] = Value
                if ObjectType == 'USER':
                    o = IUser(ObjectId, self)
                    if PropName == 'ONLINESTATUS':
                        self._CallEventHandler('OnlineStatus', o, Value)
                    elif PropName == 'MOOD_TEXT' or PropName == 'RICH_MOOD_TEXT':
                        self._CallEventHandler('UserMood', o, Value)
                elif ObjectType == 'CALL':
                    o = ICall(ObjectId, self)
                    if PropName == 'STATUS':
                        self._CallEventHandler('CallStatus', o, Value)
                    elif PropName == 'SEEN':
                        self._CallEventHandler('CallSeenStatusChanged', o, Value == 'TRUE')
                    elif PropName == 'VAA_INPUT_STATUS':
                        self._CallEventHandler('CallInputStatusChanged', o, Value == 'TRUE')
                    elif PropName == 'TRANSFER_STATUS':
                        self._CallEventHandler('CallTransferStatusChanged', o, Value)
                    elif PropName == 'DTMF':
                        self._CallEventHandler('CallDtmfReceived', o, Value)
                    elif PropName == 'VIDEO_STATUS':
                        self._CallEventHandler('CallVideoStatusChanged', o, Value)
                    elif PropName == 'VIDEO_SEND_STATUS':
                        self._CallEventHandler('CallVideoSendStatusChanged', o, Value)
                    elif PropName == 'VIDEO_RECEIVE_STATUS':
                        self._CallEventHandler('CallVideoReceiveStatusChanged', o, Value)
                elif ObjectType == 'CHAT':
                    o = IChat(ObjectId, self)
                    if PropName == 'MEMBERS':
                        self._CallEventHandler('ChatMembersChanged', o, tuple(IUser(x, self) for x in esplit(Value)))
                elif ObjectType == 'CHATMEMBER':
                    o = IChatMember(ObjectId, self)
                    if PropName == 'ROLE':
                        self._CallEventHandler('ChatMemberRoleChanged', o, Value)
                elif ObjectType == 'CHATMESSAGE':
                    o = IChatMessage(ObjectId, self)
                    if PropName == 'STATUS':
                        self._CallEventHandler('MessageStatus', o, Value)
                elif ObjectType == 'APPLICATION':
                    o = IApplication(ObjectId, self)
                    if PropName == 'CONNECTING':
                        self._CallEventHandler('ApplicationConnecting', o, tuple(IUser(x, self) for x in esplit(Value)))
                    elif PropName == 'STREAMS':
                        self._CallEventHandler('ApplicationStreams', o, tuple(IApplicationStream(x, o) for x in esplit(Value)))
                    elif PropName == 'DATAGRAM':
                        handle, text = chop(Value)
                        self._CallEventHandler('ApplicationDatagram', o, IApplicationStream(handle, o), text)
                    elif PropName == 'SENDING':
                        self._CallEventHandler('ApplicationSending', o, tuple(IApplicationStream(x.split('=')[0], o) for x in esplit(Value)))
                    elif PropName == 'RECEIVED':
                        self._CallEventHandler('ApplicationReceiving', o, tuple(IApplicationStream(x.split('=')[0], o) for x in esplit(Value)))
                elif ObjectType == 'GROUP':
                    o = IGroup(ObjectId, self)
                    if PropName == 'VISIBLE':
                        self._CallEventHandler('GroupVisible', o, Value == 'TRUE')
                    elif PropName == 'EXPANDED':
                        self._CallEventHandler('GroupExpanded', o, Value == 'TRUE')
                    elif PropName == 'USERS':
                        self._CallEventHandler('GroupUsers', o, tuple(IUser(x, self) for x in esplit(Value, ', ')))
                elif ObjectType == 'SMS':
                    o = ISmsMessage(ObjectId, self)
                    if PropName == 'STATUS':
                        self._CallEventHandler('SmsMessageStatusChanged', o, Value)
                    elif PropName == 'TARGET_STATUSES':
                        for t in esplit(Value, ', '):
                            number, status = t.split('=')
                            self._CallEventHandler('SmsTargetStatusChanged', ISmsTarget((number, o)), status)
                elif ObjectType == 'FILETRANSFER':
                    o = IFileTransfer(ObjectId, self)
                    if PropName == 'STATUS':
                        self._CallEventHandler('FileTransferStatusChanged', o, Value)
                elif ObjectType == 'VOICEMAIL':
                    o = IVoicemail(ObjectId, self)
                    if PropName == 'STATUS':
                        self._CallEventHandler('VoicemailStatus', o, Value)
            elif a in ('PROFILE', 'PRIVILEGE'):
                ObjectType, ObjectId, PropName, Value = [a, ''] + chop(b)
                self._CacheDict[str(ObjectType), str(ObjectId), str(PropName)] = Value
            elif a in ('CURRENTUSERHANDLE', 'USERSTATUS', 'CONNSTATUS', 'PREDICTIVE_DIALER_COUNTRY', 'SILENT_MODE', 'AUDIO_IN', 'AUDIO_OUT', 'RINGER', 'MUTE', 'AUTOAWAY'):
                ObjectType, ObjectId, PropName, Value = [a, '', '', b]
                self._CacheDict[str(ObjectType), str(ObjectId), str(PropName)] = Value
                if ObjectType == 'MUTE':
                    self._CallEventHandler('Mute', Value == 'TRUE')
                elif ObjectType == 'CONNSTATUS':
                    self._CallEventHandler('ConnectionStatus', Value)
                elif ObjectType == 'USERSTATUS':
                    self._CallEventHandler('UserStatus', Value)
                elif ObjectType == 'AUTOAWAY':
                    self._CallEventHandler('AutoAway', Value == 'ON')
            elif a == 'CALLHISTORYCHANGED':
                self._CallEventHandler('CallHistory')
            elif a == 'IMHISTORYCHANGED':
                self._CallEventHandler('MessageHistory', u'')
            elif a == 'CONTACTS':
                PropName, Value = chop(b)
                if PropName == 'FOCUSED':
                    self._CallEventHandler('ContactsFocused', Value)
            elif a == 'DELETED':
                PropName, Value = chop(b)
                if PropName == 'GROUP':
                    self._CallEventHandler('GroupDeleted', int(Value))
            elif a == 'EVENT':
                ObjectId, PropName, Value = chop(b, 2)
                if PropName == 'CLICKED':
                    self._CallEventHandler('PluginEventClicked', IPluginEvent(ObjectId, self))
            elif a == 'MENU_ITEM':
                ObjectId, PropName, Value = chop(b, 2)
                if PropName == 'CLICKED':
                    i = Value.rfind('CONTEXT ')
                    if i >= 0:
                        context = chop(Value[i+8:])[0]
                        users = ()
                        context_id = u''
                        if context in (pluginContextContact, pluginContextCall, pluginContextChat):
                            users = tuple(IUser(x, self) for x in esplit(Value[:i-1], ', '))
                        if context in (pluginContextCall, pluginContextChat):
                            j = Value.rfind('CONTEXT_ID ')
                            if j >= 0:
                                context_id = chop(Value[j+11:])[0]
                        self._CallEventHandler('PluginMenuItemClicked', IPluginMenuItem(ObjectId, self), users, context, context_id)
            elif a == 'WALLPAPER':
                self._CallEventHandler('WallpaperChanged', b.encode(sys.getfilesystemencoding()))
        elif mode == 'rece':
            self._CallEventHandler('Reply', arg)
        elif mode == 'send':
            self._CallEventHandler('Command', arg)
        elif mode == 'attach':
            self._CallEventHandler('AttachmentStatus', arg)
            if arg == apiAttachRefused:
                raise ISkypeAPIError('Skype connection refused')

    def _DoCommand(self, com, reply=''):
        command = ICommand(-1, com, reply, True, self.Timeout)
        self.SendCommand(command)
        a, b = chop(command.Reply)
        if a == 'ERROR':
            errnum, errstr = chop(b)
            self._CallEventHandler('Error', command, int(errnum), errstr)
            raise ISkypeError(int(errnum), errstr)
        if not command.Reply.startswith(command.Expected):
            raise ISkypeError(0, 'Unexpected reply from Skype')
        return command.Reply

    def _Property(self, ObjectType, ObjectId, PropName, Set=None, Cache=True):
        h = (str(ObjectType), str(ObjectId), str(PropName))
        arg = ('%s %s %s' % h).split()
        while '' in arg:
            arg.remove('')
        if Set == None: # Get
            if Cache and self._Cache and h in self._CacheDict:
                return self._CacheDict[h]
            Value = self._DoCommand('GET %s' % ' '.join(arg))
            while arg:
                try:
                    a, b = chop(Value)
                except ValueError:
                    break
                if a.lower() != arg[0].lower():
                    break
                del arg[0]
                Value = b
            if Cache and self._Cache:
                self._CacheDict[h] = Value
            return Value
        else: # Set
            self._DoCommand('SET %s %s' % (' '.join(arg), unicode(Set)))

    def _Alter(self, ObjectType, ObjectId, AlterName, Args=None, Reply=None):
        com = 'ALTER %s %s %s' % (str(ObjectType), str(ObjectId), str(AlterName))
        if Reply == None:
            Reply = com
        if Args != None:
            com = '%s %s' % (com, Args)
        reply = self._DoCommand(com, Reply)
        arg = com.split()
        while arg:
            try:
                a, b = chop(reply)
            except ValueError:
                break
            if a.lower() != arg[0].lower():
                break
            del arg[0]
            reply = b
        return reply

    def _Search(self, ObjectType, Args=None):
        com = 'SEARCH %s' % ObjectType
        if Args != None:
            com = '%s %s' % (com, Args)
        return esplit(chop(self._DoCommand(com))[-1], ', ')

    def Attach(self, Protocol=5, Wait=True):
        '''Establishes a connection to Skype.

        @param Protocol: Minimal Skype protocol version.
        @type Protocol: int
        @param Wait: If set to False, blocks forever until the connection is established.
        Otherwise, timeouts after the L{Timeout}.
        @type Wait: bool
        '''
        try:
            self._API.Protocol = Protocol
            self._API.Attach(self.Timeout, Wait)
        except ISkypeAPIError:
            self.ResetCache()
            raise

    def SendCommand(self, Command):
        '''Sends an API command.

        @param Command: Command to send. Use L{Command} method to create a command.
        @type Command: L{ICommand}
        '''
        try:
            self._API.SendCommand(Command)
        except ISkypeAPIError:
            self.ResetCache()
            raise

    def Command(self, Command, Reply=u'', Block=False, Timeout=30000, Id=-1):
        '''Creates an API command object.

        @param Command: Command string.
        @type Command: unicode
        @param Reply: Expected reply. By default any reply is accepted (except errors
        which raise an L{ISkypeError} exception).
        @type Reply: unicode
        @param Block: If set to True, L{SendCommand} method waits for a response from Skype API before returning.
        @type Block: bool
        @param Timeout: Timeout in milliseconds. Used if Block=True.
        @type Timeout: int
        @param Id: Command Id. The default (-1) means it will be assigned automatically as soon as the command is sent.
        @type Id: int
        @return: A command object.
        @rtype: L{ICommand}
        @see: L{SendCommand}
        '''
        return ICommand(Id, Command, Reply, Block, Timeout)

    def SearchForUsers(self, Target):
        '''Searches for users.

        @param Target: Search target (name or email address).
        @type Target: unicode
        @return: Found users.
        @rtype: tuple of L{IUser}
        '''
        return tuple(IUser(x, self) for x in self._Search('USERS', Target))

    def AsyncSearchUsers(self, Target):
        '''Asynchronously searches for Skype users.

        @param Target: Search target (name or email address).
        @type Target: unicode
        @return: A search identifier. It will be passed along with the results to the
        L{ISkypeEvents.AsyncSearchUsersFinished} event after the search is completed.
        @rtype: int
        '''
        def reply_handler(command):
            if command.Command.startswith('SEARCH USERS'):
                self._CallEventHandler('AsyncSearchUsersFinished', command.Id, tuple(IUser(x, self) for x in esplit(chop(command.Reply)[-1], ', ')))
                self.UnregisterEventHandler('Reply', reply_handler)
        command = ICommand(-1, 'SEARCH USERS %s' % Target, 'USERS', False, self.Timeout)
        self.RegisterEventHandler('Reply', reply_handler)
        self.SendCommand(command)
        # return pCookie - search identifier
        return command.Id

    def PlaceCall(self, *Targets):
        '''Places a call to a single user or creates a conference call.

        @param Targets: One or more call targets. If multiple targets are specified, a conference
        call is created. The call target can be a Skypename, phone number, or speed dial code.
        @type Targets: unicode
        @return: A call object.
        @rtype: L{ICall}
        '''
        calls = self.ActiveCalls
        reply = self._DoCommand('CALL %s' % ', '.join(Targets))
        # Skype for Windows returns the call status which gives us the call Id;
        if reply.startswith('CALL '):
            return ICall(chop(reply, 2)[1], self)
        # On linux we get 'OK' as reply so we search for the new call on
        # list of active calls.
        for c in self.ActiveCalls:
            if c not in calls:
                return c
        raise ISkypeError(0, 'Placing call failed')

    def SendMessage(self, Username, Text):
        '''Sends a chat message.

        @param Username: Skypename of the user.
        @type Username: unicode
        @param Text: Body of the message.
        @type Text: unicode
        @return: A chat message object.
        @rtype: L{IChatMessage}
        '''
        return self.CreateChatWith(Username).SendMessage(Text)

    def ChangeUserStatus(self, Val):
        '''Changes the online status for the current user.

        @param Val: New online status for the user.
        @type Val: L{User status<enums.cusUnknown>}

        @note: This function waits until the online status changes. Alternatively, use
        the L{CurrentUserStatus} property to perform an immediate change of status.
        '''
        event = threading.Event()
        def userstatus_handler(status):
            if status.upper() == Val.upper():
                event.set()
        self.RegisterEventHandler('UserStatus', userstatus_handler)
        self.CurrentUserStatus = Val
        event.wait()
        self.UnregisterEventHandler('UserStatus', userstatus_handler)

    def CreateChatWith(self, *Usernames):
        '''Creates a chat with one or more users.

        @param Usernames: One or more strings with the Skypenames of the users.
        @type Usernames: unicode
        @return: A chat object
        @rtype: L{IChat}
        @see: L{IChat.AddMembers}
        '''
        return IChat(chop(self._DoCommand('CHAT CREATE %s' % ', '.join(Usernames)), 2)[1], self)

    def CreateChatMultiple(self, Members):
        '''@deprecated: Use L{CreateChatWith} instead.'''
        deprecated('ISkype', 'CreateChatMultiple()', 'CreateChatWith()')
        return IChat(chop(self._DoCommand('CHAT CREATE %s' % ', '.join([x.Handle for x in Members])), 2)[1], self)

    def SendVoicemail(self, Username):
        '''Sends a voicemail to a specified user.

        @param Username: Skypename of the user.
        @type Username: unicode
        @return: A voicemail object.
        @rtype: L{IVoicemail}
        '''
        if self._API.Protocol >= 6:
            self._DoCommand('CALLVOICEMAIL %s' % Username)
        else:
            self._DoCommand('VOICEMAIL %s' % Username)

    def ClearChatHistory(self):
        '''Clears the chat history.
        '''
        self._DoCommand('CLEAR CHATHISTORY')

    def ClearVoicemailHistory(self):
        '''Clears the voicemail history.
        '''
        self._DoCommand('CLEAR VOICEMAILHISTORY')

    def ClearCallHistory(self, Username='ALL', Type=chsAllCalls):
        '''Clears the call history.

        @param Username: Skypename of the user. A special value of 'ALL' means that entries of all users should
        be removed.
        @type Username: unicode
        @param Type: Call type.
        @type Type: L{Call type<enums.cltUnknown>}
        '''
        self._DoCommand('CLEAR CALLHISTORY %s %s' % (str(Type), Username))

    def ResetCache(self):
        '''Deletes all command cache entries.

        This method clears the Skype4Py's internal command cache which means that all objects will forget
        their property values and querying them will trigger a code to get them from Skype client (and
        cache them again).
        '''
        self._CacheDict = {}

    def CreateGroup(self, GroupName):
        '''Creates a custom contact group.

        @param GroupName: Group name.
        @type GroupName: unicode
        @return: A group object.
        @rtype: L{IGroup}
        @see: L{DeleteGroup}
        '''
        groups = self.CustomGroups
        self._DoCommand('CREATE GROUP %s' % GroupName)
        for g in self.CustomGroups:
            if g not in groups and g.DisplayName == GroupName:
                return g
        raise ISkypeError(0, 'Group creating failed')

    def DeleteGroup(self, GroupId):
        '''Deletes a custom contact group.

        Users in the contact group are moved to the All Contacts (hardwired) contact group.

        @param GroupId: Group identifier. Get it from L{IGroup.Id}.
        @type GroupId: int
        @see: L{CreateGroup}
        '''
        self._DoCommand('DELETE GROUP %s' % GroupId)

    def CreateSms(self, MessageType, *TargetNumbers):
        '''Creates an SMS message.

        @param MessageType: Message type.
        @type MessageType: L{SMS message type<enums.smsMessageTypeUnknown>}
        @param TargetNumbers: One or more target SMS numbers.
        @type TargetNumbers: unicode
        @return: An sms message object.
        @rtype: L{ISmsMessage}
        '''
        return ISmsMessage(chop(self._DoCommand('CREATE SMS %s %s' % (MessageType, ', '.join(TargetNumbers))), 2)[1], self)

    def SendSms(self, MessageText, *TargetNumbers, **Options):
        '''Creates and sends an SMS message.

        @param MessageText: Text of the message to send.
        @type MessageText: unicode
        @param TargetNumbers: One or more target SMS numbers.
        @type TargetNumbers: unicode
        @param Options: Additional options.
        @type Options: kwargs
        @return: An sms message object.
        @rtype: L{ISmsMessage}

        @option: C{ReplyToNumber} (unicode) - Reply-To number.
        '''
        sms = ISmsMessage(chop(self._DoCommand('CREATE SMS OUTGOING %s' % ', '.join(TargetNumbers)), 2)[1], self)
        sms.Body = MessageText
        sms.__dict__.update(Options)
        sms.Send()
        return sms

    def Property(self, ObjectType, ObjectId, PropName, Set=None):
        '''Queries/sets the properties of an object.

        @param ObjectType: Object type, currently one of 'USER', 'CALL', 'CHAT', 'CHATMESSAGE', 'VOICEMAIL'.
        @type ObjectType: unicode
        @param ObjectId: Object Id, depends on the object type
        @type ObjectId: unicode
        @param PropName: Name of the property you want to access.
        @type PropName: unicode
        @param Set: Value the property should be set to or None if the value should be queried.
        @type Set: unicode or None
        @return: Property value if Set=None, None otherwise.
        @rtype: unicode or None
        '''
        return self._Property(ObjectType, ObjectId, PropName, Set)

    def Variable(self, Name, Set=None):
        '''Queries/sets Skype general parameters.

        @param Name: Variable name.
        @type Name: unicode
        @param Set: Value the variable should be set to or None if the value should be queried.
        @type Set: unicode or None
        @return: Variable value if Set=None, None otherwise.
        @rtype: unicode or None
        '''
        return self._Property(Name, '', '', Set)

    def Privilege(self, Name):
        '''Queries the Skype services (privileges) enabled for the Skype client.

        @param Name: Privilege name, currently one of 'SKYPEOUT', 'SKYPEIN', 'VOICEMAIL'.
        @type Name: unicode
        @return: True if the priviledge is available, False otherwise.
        @rtype: bool
        '''
        return self._Property('PRIVILEGE', '', Name.upper()) == 'TRUE'

    def Calls(self, Target=''):
        '''Queries calls in call history.

        @param Target: Call target.
        @type Target: unicode
        @return: Call objects.
        @rtype: tuple of L{ICall}
        '''
        return tuple(ICall(x, self) for x in self._Search('CALLS', Target))

    def Messages(self, Target=''):
        '''Queries chat messages which were sent/received by the user.

        @param Target: Message sender.
        @type Target: unicode
        @return: Chat message objects.
        @rtype: tuple of L{IChatMessage}
        '''
        return tuple(IChatMessage(x, self) for x in self._Search('CHATMESSAGES', Target))

    def User(self, Username=''):
        '''Queries a user object.

        @param Username: Skypename of the user.
        @type Username: unicode
        @return: A user object.
        @rtype: L{IUser}
        '''
        o = IUser(Username, self)
        o.OnlineStatus
        return o

    def Message(self, Id=0):
        '''Queries a chat message object.

        @param Id: Message Id.
        @type Id: int
        @return: A chat message object.
        @rtype: L{IChatMessage}
        '''
        o = IChatMessage(Id, self)
        o.Status
        return o

    def Call(self, Id=0):
        '''Queries a call object.

        @param Id: Call identifier.
        @type Id: int
        @return: Call object.
        @rtype: L{ICall}
        '''
        o = ICall(Id, self)
        o.Status
        return o

    def Chat(self, Name=''):
        '''Queries a chat object.

        @param Name: Chat name.
        @type Name: unicode
        @return: A chat object.
        @rtype: L{IChat}
        '''
        o = IChat(Name, self)
        o.Status
        return o

    def Conference(self, Id=0):
        '''Queries a call conference object.

        @param Id: Conference Id.
        @type Id: int
        @return: A conference object.
        @rtype: L{IConference}
        '''
        o = IConference(Id, self)
        if Id <= 0 or not o.Calls:
            raise ISkypeError(0, 'Unknown conference')
        return o

    def Profile(self, Property, Set=None):
        '''Queries/sets user profile properties.

        @param Property: Property name, currently one of 'PSTN_BALANCE', 'PSTN_BALANCE_CURRENCY',
        'FULLNAME', 'BIRTHDAY', 'SEX', 'LANGUAGES', 'COUNTRY', 'PROVINCE', 'CITY', 'PHONE_HOME',
        'PHONE_OFFICE', 'PHONE_MOBILE', 'HOMEPAGE', 'ABOUT'.
        @type Property: unicode
        @param Set: Value the property should be set to or None if the value should be queried.
        @type Set: unicode or None
        @return: Property value if Set=None, None otherwise.
        @rtype: unicode or None
        '''
        return self._Property('PROFILE', '', Property, Set)

    def Application(self, Name):
        '''Queries an application object.

        @param Name: Application name.
        @type Name: unicode
        @return: The application object.
        @rtype: L{IApplication}
        '''
        return IApplication(Name, self)

    def Greeting(self, Username=''):
        '''Queries the greeting used as voicemail.

        @param Username: Skypename of the user.
        @type Username: unicode
        @return: A voicemail object.
        @rtype: L{IVoicemail}
        '''
        for v in self.Voicemails:
            if Username and v.PartnerHandle != Username:
                continue
            if v.Type in (vmtDefaultGreeting, vmtCustomGreeting):
                return v

    def Voicemail(self, Id):
        '''Queries the voicemail object.

        @param Id: Voicemail Id.
        @type Id: int
        @return: A voicemail object.
        @rtype: L{IVoicemail}
        '''
        o = IVoicemail(Id, self)
        o.Type
        return o

    def ApiSecurityContextEnabled(self, Context):
        '''Queries if an API security context for Internet Explorer is enabled.

        @param Context: API security context to check.
        @type Context: L{API security context<enums.apiContextUnknown>}
        @return: True if the API security for the given context is enabled, False elsewhere.
        @rtype: bool

        @warning: This functionality isn't supported by Skype4Py.
        '''
        self._API.ApiSecurityContextEnabled(Context)

    def EnableApiSecurityContext(self, Context):
        '''Enables an API security context for Internet Explorer scripts.

        @param Context: combination of API security context values.
        @type Context: L{API security context<enums.apiContextUnknown>}

        @warning: This functionality isn't supported by Skype4Py.
        '''
        self._API.EnableApiSecurityContext(Context)

    def CreateChatUsingBlob(self, Blob):
        '''Returns existing or joins a new chat using given blob.

        @param Blob: A blob indentifying the chat.
        @type Blob: unicode
        @return: A chat object
        @rtype: L{IChat}
        '''
        return IChat(chop(self._DoCommand('CHAT CREATEUSINGBLOB %s' % Blob), 2)[1], self)

    def FindChatUsingBlob(self, Blob):
        '''Returns existing chat using given blob.

        @param Blob: A blob indentifying the chat.
        @type Blob: unicode
        @return: A chat object
        @rtype: L{IChat}
        '''
        return IChat(chop(self._DoCommand('CHAT FINDUSINGBLOB %s' % Blob), 2)[1], self)

    ###
    ### PROPERTIES
    ###

    def _GetTimeout(self):
        return self._Timeout

    def _SetTimeout(self, value):
        self._Timeout = int(value)

    Timeout = property(_GetTimeout, _SetTimeout)
    '''Queries/sets the wait timeout value in milliseconds. This timeout value applies to every
    command sent to the Skype API. If a response is not received during the timeout period, an
    L{ISkypeAPIError} exception is raised.

    Type: int
    @type: int'''

    def _GetProtocol(self):
        return self._API.Protocol

    def _SetProtocol(self, value):
        self._API.Protocol = int(value)

    Protocol = property(_GetProtocol, _SetProtocol)
    '''Queries/sets the protocol version used by the Skype client.

    Type: int
    @type: int'''

    def _GetCurrentUserHandle(self):
        return self.Variable('CURRENTUSERHANDLE')

    CurrentUserHandle = property(_GetCurrentUserHandle)
    '''Queries the Skypename of the current user.

    Type: unicode
    @type: unicode'''

    def _GetCurrentUserStatus(self):
        return self.Variable('USERSTATUS')

    def _SetCurrentUserStatus(self, value):
        self.Variable('USERSTATUS', str(value))

    CurrentUserStatus = property(_GetCurrentUserStatus, _SetCurrentUserStatus)
    '''Queries/sets the online status of the current user.

    Type: L{Online status<enums.olsUnknown>}
    @type: L{Online status<enums.olsUnknown>}'''

    def _GetConnectionStatus(self):
        return self.Variable('CONNSTATUS')

    ConnectionStatus = property(_GetConnectionStatus)
    '''Queries the connection status of the Skype client.

    Type: L{Connection status<enums.conUnknown>}
    @type: L{Connection status<enums.conUnknown>}'''

    def _GetMute(self):
        return self.Variable('MUTE') == 'ON'

    def _SetMute(self, value):
        self.Variable('MUTE', cndexp(value, 'ON', 'OFF'))

    Mute = property(_GetMute, _SetMute)
    '''Queries/sets the mute status of the Skype client.

    Type: bool
    Note: This value can be set only when there is an active call.
    @type: bool'''

    def _GetVersion(self):
        return self.Variable('SKYPEVERSION')

    Version = property(_GetVersion)
    '''Queries the application version of the Skype client.

    Type: unicode
    @type: unicode'''

    def _GetCurrentUser(self):
        return IUser(self.CurrentUserHandle, self)

    CurrentUser = property(_GetCurrentUser)
    '''Queries the current user object.

    Type: L{IUser}
    @type: L{IUser}'''

    def _GetConvert(self):
        return self._Convert

    Convert = property(_GetConvert)
    '''Queries the conversion object.

    Type: L{IConversion}
    @type: L{IConversion}'''

    def _GetFriends(self):
        return tuple(IUser(x, self) for x in self._Search('FRIENDS'))

    Friends = property(_GetFriends)
    '''Queries the users in a contact list.

    Type: tuple of L{IUser}
    @type: tuple of L{IUser}'''

    def _GetClient(self):
        return self._Client

    Client = property(_GetClient)
    '''Queries the user interface control object.

    Type: L{IClient}
    @type: L{IClient}'''

    def _GetAttachmentStatus(self):
        return self._API.AttachmentStatus

    AttachmentStatus = property(_GetAttachmentStatus)
    '''Queries the attachment status of the Skype client.

    Type: L{Attachment status<enums.apiAttachUnknown>}
    @type: L{Attachment status<enums.apiAttachUnknown>}'''

    def _GetCurrentUserProfile(self):
        return self._Profile

    CurrentUserProfile = property(_GetCurrentUserProfile)
    '''Queries the user profile object.

    Type: L{IProfile}
    @type: L{IProfile}'''

    def _GetGroups(self):
        return tuple(IGroup(x, self) for x in self._Search('GROUPS', 'ALL'))

    Groups = property(_GetGroups)
    '''Queries the list of all contact groups.

    Type: tuple of L{IGroup}
    @type: tuple of L{IGroup}'''

    def _GetCustomGroups(self):
        return tuple(IGroup(x, self) for x in self._Search('GROUPS', 'CUSTOM'))

    CustomGroups = property(_GetCustomGroups)
    '''Queries the list of custom contact groups. Custom groups are contact groups defined by the user.

    Type: tuple of L{IGroup}
    @type: tuple of L{IGroup}'''

    def _GetHardwiredGroups(self):
        return tuple(IGroup(x, self) for x in self._Search('GROUPS', 'HARDWIRED'))

    HardwiredGroups = property(_GetHardwiredGroups)
    '''Queries the list of hardwired contact groups. Hardwired groups are "smart" contact groups,
    defined by Skype, that cannot be removed.

    Type: tuple of L{IGroup}
    @type: tuple of L{IGroup}'''

    def _GetActiveCalls(self):
        return tuple(ICall(x, self) for x in self._Search('ACTIVECALLS'))

    ActiveCalls = property(_GetActiveCalls)
    '''Queries a list of active calls.

    Type: tuple of L{ICall}
    @type: tuple of L{ICall}'''

    def _GetMissedCalls(self):
        return tuple(ICall(x, self) for x in self._Search('MISSEDCALLS'))

    MissedCalls = property(_GetMissedCalls)
    '''Queries a list of missed calls.

    Type: tuple of L{ICall}
    @type: tuple of L{ICall}'''

    def _SetFriendlyName(self, FriendlyName):
        self._API.SetFriendlyName(FriendlyName)

    FriendlyName = property(fset=_SetFriendlyName)
    '''Sets a "friendly" name for an application.

    Type: unicode
    @type: unicode'''

    def _GetApiWrapperVersion(self):
        from Skype4Py import __version__
        return unicode(__version__)

    ApiWrapperVersion = property(_GetApiWrapperVersion)
    '''Returns Skype4Py version.

    Type: unicode
    @type: unicode'''

    def _GetSilentMode(self):
        return self.Variable('SILENT_MODE') == 'ON'

    def _SetSilentMode(self, value):
        self.SendCommand(ICommand(-1, 'SET SILENT_MODE %s' % cndexp(value, 'ON', 'OFF')))

    SilentMode = property(_GetSilentMode, _SetSilentMode)
    '''Returns/sets Skype silent mode status.

    Type: bool
    @type: bool'''

    def _GetSettings(self):
        return self._Settings

    Settings = property(_GetSettings)
    '''Queries the settings for Skype general parameters.

    Type: L{ISettings}
    @type: L{ISettings}'''

    def _GetUsersWaitingAuthorization(self):
        return tuple(IUser(x, self) for x in self._Search('USERSWAITINGMYAUTHORIZATION'))

    UsersWaitingAuthorization = property(_GetUsersWaitingAuthorization)
    '''Queries the list of users waiting for authorization.

    Type: tuple of L{IUser}
    @type: tuple of L{IUser}'''

    def _GetCache(self):
        return self._Cache

    def _SetCache(self, value):
        self._Cache = bool(value)

    Cache = property(_GetCache, _SetCache)
    '''Queries/sets the status of internal cache. The internal API cache is used
    to cache Skype object properties and global parameters.

    Type: bool
    @type: bool'''

    def _GetCommandId(self):
        return True

    def _SetCommandId(self, value):
        pass

    CommandId = property(_GetCommandId, _SetCommandId)
    '''Queries/sets the status of automatic command identifiers.

    Type: bool
    Note: Currently it is always True.
    @type: bool'''

    def _GetChats(self):
        return tuple(IChat(x, self) for x in self._Search('CHATS'))

    Chats = property(_GetChats)
    '''Queries a list of chats.

    Type: tuple of L{IChat}
    @type: tuple of L{IChat}'''

    def _GetActiveChats(self):
        return tuple(IChat(x, self) for x in self._Search('ACTIVECHATS'))

    ActiveChats = property(_GetActiveChats)
    '''Queries a list of active chats.

    Type: tuple of L{IChat}
    @type: tuple of L{IChat}'''

    def _GetMissedChats(self):
        return tuple(IChat(x, self) for x in self._Search('MISSEDCHATS'))

    MissedChats = property(_GetMissedChats)
    '''Queries a list of missed chats.

    Type: tuple of L{IChat}
    @type: tuple of L{IChat}'''

    def _GetRecentChats(self):
        return tuple(IChat(x, self) for x in self._Search('RECENTCHATS'))

    RecentChats = property(_GetRecentChats)
    '''Queries a list of recent chats.

    Type: tuple of L{IChat}
    @type: tuple of L{IChat}'''

    def _GetBookmarkedChats(self):
        return tuple(IChat(x, self) for x in self._Search('BOOKMARKEDCHATS'))

    BookmarkedChats = property(_GetBookmarkedChats)
    '''Queries a list of bookmarked chats.

    Type: tuple of L{IChat}
    @type: tuple of L{IChat}'''

    def _GetMissedMessages(self):
        return tuple(IChatMessage(x, self) for x in self._Search('MISSEDCHATMESSAGES'))

    MissedMessages = property(_GetMissedMessages)
    '''Queries a list of missed chat messages.

    Type: L{IChatMessage}
    @type: L{IChatMessage}'''

    def _GetVoicemails(self):
        return tuple(IVoicemail(x, self) for x in self._Search('VOICEMAILS'))

    Voicemails = property(_GetVoicemails)
    '''Queries a list of voicemails.

    Type: L{IVoicemail}
    @type: L{IVoicemail}'''

    def _GetMissedVoicemails(self):
        return tuple(IVoicemail(x, self) for x in self._Search('MISSEDVOICEMAILS'))

    MissedVoicemails = property(_GetMissedVoicemails)
    '''Requests a list of missed voicemails.

    Type: L{IVoicemail}
    @type: L{IVoicemail}'''

    def _GetConferences(self):
        confs = []
        for c in self.Calls():
            cid = c.ConferenceId
            if cid > 0 and cid not in [x.Id for x in confs]:
                confs.append(IConference(cid, self))
        return tuple(confs)

    Conferences = property(_GetConferences)
    '''Queries a list of call conferences.

    Type: tuple of L{IConference}
    @type: tuple of L{IConference}'''

    def _GetSmss(self):
        return tuple(ISmsMessage(x, self) for x in self._Search('SMSS'))

    Smss = property(_GetSmss)
    '''Requests a list of all SMS messages.

    Type: tuple of L{ISmsMessage}
    @type: tuple of L{ISmsMessage}'''

    def _GetMissedSmss(self):
        return tuple(ISmsMessage(x, self) for x in self._Search('MISSEDSMSS'))

    MissedSmss = property(_GetMissedSmss)
    '''Requests a list of all missed SMS messages.

    Type: tuple of L{ISmsMessage}
    @type: tuple of L{ISmsMessage}'''

    def _GetFileTransfers(self):
        return tuple(IFileTransfer(x, self) for x in self._Search('FILETRANSFERS'))

    FileTransfers = property(_GetFileTransfers)
    '''Queries all file transfers.

    Type: tuple of L{IFileTransfer}
    @type: tuple of L{IFileTransfer}'''

    def _GetActiveFileTransfers(self):
        return tuple(IFileTransfer(x, self) for x in self._Search('ACTIVEFILETRANSFERS'))

    ActiveFileTransfers = property(_GetActiveFileTransfers)
    '''Queries currently active file transfers.

    Type: tuple of L{IFileTransfer}
    @type: tuple of L{IFileTransfer}'''

    def _GetFocusedContacts(self):
        return tuple(IUser(x, self) for x in esplit(chop(self.Variable('CONTACTS_FOCUSED'), 2)[-1]))

    FocusedContacts = property(_GetFocusedContacts)
    '''Queries a list of contacts selected in the contacts list.

    Type: tuple of L{IUser}
    @type: tuple of L{IUser}'''


class ISkypeEvents(object):
    def Notify(self, Notification):
        '''This event is triggered whenever Skype client sends a notification.

        @param Notification: Notification string.
        @type Notification: unicode
        @note: This is a custom Skype4Py event. Use it only if there is no dedicated event.
        '''

    def Command(self, Command):
        '''This event is triggered when a command is sent to the Skype API.

        @param Command: Command object.
        @type Command: L{ICommand}
        '''

    def Reply(self, Command):
        '''This event is triggered when the API replies to a command object.

        @param Command: Command object.
        @type Command: L{ICommand}
        '''

    def Error(self, Command, Number, Description):
        '''This event is triggered when an error occurs during execution of an API command.

        @param Command: Command object that caused the error.
        @type Command: L{ICommand}
        @param Number: Error number returned by the Skype API.
        @type Number: int
        @param Description: Description of the error.
        @type Description: unicode
        '''

    def AttachmentStatus(self, Status):
        '''This event is caused by a change in the status of an attachment to the Skype API.

        @param Status: New attachment status.
        @type Status: L{Attachment status<enums.apiAttachUnknown>}
        '''

    def ConnectionStatus(self, Status):
        '''This event is caused by a connection status change.

        @param Status: New connection status.
        @type Status: L{Connection status<enums.conUnknown>}
        '''

    def UserStatus(self, Status):
        '''This event is caused by a user status change.

        @param Status: New user status.
        @type Status: L{User status<enums.cusUnknown>}
        '''

    def OnlineStatus(self, User, Status):
        '''This event is caused by a change in the online status of a user.

        @param User: User object.
        @type User: L{IUser}
        @param Status: New online status of the user.
        @type Status: L{Online status<enums.olsUnknown>}
        '''

    def CallStatus(self, Call, Status):
        '''This event is caused by a change in call status.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Status: New status of the call.
        @type Status: L{Call status<enums.clsUnknown>}
        '''

    def CallHistory(self):
        '''This event is caused by a change in call history.'''

    def Mute(self, Mute):
        '''This event is caused by a change in mute status.

        @param Mute: New mute status.
        @type Mute: bool
        '''

    def MessageStatus(self, Message, Status):
        '''This event is caused by a change in chat message status.

        @param Message: Chat message object.
        @type Message: L{IChatMessage}
        @param Status: New status of the chat message.
        @type Status: L{Chat message status<enums.cmsUnknown>}
        '''

    def MessageHistory(self, Username):
        '''This event is caused by a change in message history.

        @param Username: Name of the user whose message history changed.
        @type Username: unicode
        '''

    def AutoAway(self, Automatic):
        '''This event is caused by a change of auto away status.

        @param Automatic: New auto away status.
        @type Automatic: bool
        '''

    def CallDtmfReceived(self, Call, Code):
        '''This event is caused by a call DTMF event.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Code: Received DTMF code.
        @type Code: unicode
        '''

    def VoicemailStatus(self, Mail, Status):
        '''This event is caused by a change in voicemail status.

        @param Mail: Voicemail object.
        @type Mail: L{IVoicemail}
        @param Status: New status of the voicemail.
        @type Status: L{Voicemail status<enums.vmsUnknown>}
        '''

    def ApplicationConnecting(self, App, Users):
        '''This event is triggered when list of users connecting to an application changes.

        @param App: Application object.
        @type App: L{IApplication}
        @param Users: Connecting users.
        @type Users: tuple of L{IUser}
        '''

    def ApplicationStreams(self, App, Streams):
        '''This event is triggered when list of application streams changes.

        @param App: Application object.
        @type App: L{IApplication}
        @param Streams: Application streams.
        @type Streams: tuple of L{IApplicationStream}
        '''

    def ApplicationDatagram(self, App, Stream, Text):
        '''This event is caused by the arrival of an application datagram.

        @param App: Application object.
        @type App: L{IApplication}
        @param Stream: Application stream that received the datagram.
        @type Stream: L{IApplicationStream}
        @param Text: The datagram text.
        @type Text: unicode
        '''

    def ApplicationSending(self, App, Streams):
        '''This event is triggered when list of application sending streams changes.

        @param App: Application object.
        @type App: L{IApplication}
        @param Streams: Application sending streams.
        @type Streams: tuple of L{IApplicationStream}
        '''

    def ApplicationReceiving(self, App, Streams):
        '''This event is triggered when list of application receiving streams changes.

        @param App: Application object.
        @type App: L{IApplication}
        @param Streams: Application receiving streams.
        @type Streams: tuple of L{IApplicationStream}
        '''

    def ContactsFocused(self, Username):
        '''This event is caused by a change in contacts focus.

        @param Username: Name of the user that was focused or empty string if focus was lost.
        @type Username: unicode
        '''

    def GroupVisible(self, Group, Visible):
        '''This event is caused by a user hiding/showing a group in the contacts tab.

        @param Group: Group object.
        @type Group: L{IGroup}
        @param Visible: Tells if the group is visible or not.
        @type Visible: bool
        '''

    def GroupExpanded(self, Group, Expanded):
        '''This event is caused by a user expanding or collapsing a group in the contacts tab.

        @param Group: Group object.
        @type Group: L{IGroup}
        @param Expanded: Tells if the group is expanded (True) or collapsed (False).
        @type Expanded: bool
        '''

    def GroupUsers(self, Group, Users):
        '''This event is caused by a change in a contact group members.

        @param Group: Group object.
        @type Group: L{IGroup}
        @param Users: Group members.
        @type Users: tuple of L{IUser}
        '''

    def GroupDeleted(self, GroupId):
        '''This event is caused by a user deleting a custom contact group.

        @param GroupId: Id of the deleted group.
        @type GroupId: int
        '''

    def UserMood(self, User, MoodText):
        '''This event is caused by a change in the mood text of the user.

        @param User: User object.
        @type User: L{IUser}
        @param MoodText: New mood text.
        @type MoodText: unicode
        '''

    def SmsMessageStatusChanged(self, Message, Status):
        '''This event is caused by a change in the SMS message status.

        @param Message: SMS message object.
        @type Message: L{ISmsMessage}
        @param Status: New status of the SMS message.
        @type Status: L{SMS message status<enums.smsMessageStatusUnknown>}
        '''

    def SmsTargetStatusChanged(self, Target, Status):
        '''This event is caused by a change in the SMS target status.

        @param Target: SMS target object.
        @type Target: L{ISmsTarget}
        @param Status: New status of the SMS target.
        @type Status: L{SMS target status<enums.smsTargetStatusUnknown>}
        '''

    def CallInputStatusChanged(self, Call, Active):
        '''This event is caused by a change in the Call voice input status change.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Active: New voice input status (active when True).
        @type Active: bool
        '''

    def AsyncSearchUsersFinished(self, Cookie, Users):
        '''This event occurs when an asynchronous search is completed.

        @param Cookie: Search identifier as returned by L{ISkype.AsyncSearchUsers}.
        @type Cookie: int
        @param Users: Found users.
        @type Users: tuple of L{IUser}
        @see: L{ICall.InputDevice}
        '''

    def CallSeenStatusChanged(self, Call, Seen):
        '''This event occurs when the seen status of a call changes.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Seen: True if call was seen.
        @type Seen: bool
        @see: L{ICall.Seen}
        '''

    def PluginEventClicked(self, Event):
        '''This event occurs when a user clicks on a plug-in event.

        @param Event: Plugin event object.
        @type Event: L{IPluginEvent}
        '''

    def PluginMenuItemClicked(self, MenuItem, Users, PluginContext, ContextId):
        '''This event occurs when a user clicks on a plug-in menu item.

        @param MenuItem: Menu item object.
        @type MenuItem: L{IPluginMenuItem}
        @param Users: Users this item refers to.
        @type Users: tuple of L{IUser}
        @param PluginContext: Plug-in context.
        @type PluginContext: L{Plug-in context<enums.pluginContextUnknown>}
        @param ContextId: Context Id.
        @type ContextId: unicode
        @see: L{IPluginMenuItem}
        '''

    def WallpaperChanged(self, Path):
        '''This event occurs when client wallpaper changes.

        @param Path: Path to new wallpaper bitmap.
        @type Path: str
        '''

    def FileTransferStatusChanged(self, Transfer, Status):
        '''This event occurs when a file transfer status changes.

        @param Transfer: File transfer object.
        @type Transfer: L{IFileTransfer}
        @param Status: New status of the file transfer.
        @type Status: L{File transfer status<enums.fileTransferStatusNew>}
        '''

    def CallTransferStatusChanged(self, Call, Status):
        '''This event occurs when a call transfer status changes.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Status: New status of the call transfer.
        @type Status: L{Call status<enums.clsUnknown>}
        '''

    def ChatMembersChanged(self, Chat, Members):
        '''This event occurs when a list of chat members change.

        @param Chat: Chat object.
        @type Chat: L{IChat}
        @param Members: Chat members.
        @type Members: tuple of L{IUser}
        '''

    def ChatMemberRoleChanged(self, Member, Role):
        '''This event occurs when a chat member role changes.

        @param Member: Chat member object.
        @type Member: L{IChatMember}
        @param Role: New member role.
        @type Role: L{Chat member role<enums.chatMemberRoleUnknown>}
        '''

    def CallVideoReceiveStatusChanged(self, Call, Status):
        '''This event occurs when a call video receive status changes.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Status: New video receive status of the call.
        @type Status: L{Call video send status<enums.vssUnknown>}
        '''

    def CallVideoSendStatusChanged(self, Call, Status):
        '''This event occurs when a call video send status changes.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Status: New video send status of the call.
        @type Status: L{Call video send status<enums.vssUnknown>}
        '''

    def CallVideoStatusChanged(self, Call, Status):
        '''This event occurs when a call video status changes.

        @param Call: Call object.
        @type Call: L{ICall}
        @param Status: New video status of the call.
        @type Status: L{Call video status<enums.cvsUnknown>}
        '''


ISkype._AddEvents(ISkypeEvents)
